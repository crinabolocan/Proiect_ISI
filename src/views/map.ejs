<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Map with ArcGIS</title>

   <!-- Load Calcite components from CDN -->
   <link rel="stylesheet" type="text/css" href="https://js.arcgis.com/calcite-components/2.13.2/calcite.css" />
   <script type="module" src="https://js.arcgis.com/calcite-components/2.13.2/calcite.esm.js"></script>
  <!-- Include ArcGIS Styles -->
  <link rel="stylesheet" href="https://js.arcgis.com/4.24/esri/themes/light/main.css">
  <link rel="stylesheet" href="style_map.css">

</head>
<body>
  <!-- Hamburger Menu -->
  <div class="hamburger-menu">
    <button class="hamburger-icon" onclick="toggleMenu()">&#9776;</button>
      <div id="menu" class="menu">
        <a href="/" class="btn">Main Page</a>
        <a href="/images" class="btn">Images</a>
        <a href="/map" class="btn">Map</a>
        <a href="/profile" class="btn">Profile</a>
        <a href="/logout" class="btn">Logout</a>
      </div>
  </div>
  <!-- Map container -->
  <div id="map-container"></div>


  <button id="geolocate-btn">I'm Here!</button>



  <!-- Include the ArcGIS API -->
  <script src="https://js.arcgis.com/4.24/"></script>

  <script>
    // Toggle function for hamburger menu
    function toggleMenu() {
      const menu = document.getElementById('menu');
      menu.classList.toggle('show');
    }

    // Close the menu if clicked outside
    document.addEventListener('click', function(event) {
      const menu = document.getElementById('menu');
      const hamburgerIcon = document.querySelector('.hamburger-icon');
      if (!menu.contains(event.target) && !hamburgerIcon.contains(event.target)) {
        menu.classList.remove('show');
      }
    });
    let currentRoute = null;
    const favoriteImages = <%- JSON.stringify(favoriteImages) %>;
    require([
      "esri/config",
      "esri/WebMap",
      "esri/views/MapView",
      "esri/layers/GraphicsLayer",
      "esri/Graphic",
      "esri/geometry/Point",
      "esri/symbols/SimpleMarkerSymbol",
      "esri/symbols/PictureMarkerSymbol",
      "esri/rest/locator",
      "esri/core/reactiveUtils",
      "esri/layers/FeatureLayer",
      "esri/symbols/SimpleLineSymbol",
      "esri/rest/support/FeatureSet",
      "esri/rest/route",
      "esri/rest/support/RouteParameters"
    ], function(esriConfig, WebMap, MapView, GraphicsLayer, Graphic, Point, SimpleMarkerSymbol, PictureMarkerSymbol, Locator, reactiveUtils, FeatureLayer, SimpleLineSymbol, FeatureSet, route, RouteParameters) {

      // Set the API key
      esriConfig.apiKey = "AAPTxy8BH1VEsoebNVZXo8HurHTsJQpcDKEq34qs1KboR7ROzBxg9Ji1qhoRpyID_b3LhnnR36uXNGvR19UH-CCr5LINEBSM7uinPv6zbJiwubIC7vFYy48UVUSs_FieWxQs--DmcQPM9Reu1I2Igb4HXkUTK6eTA2MDfPJO-QVgFwk3i5ad5xaeRRXUUw1ISFVGNTPIYs4F2JoAIUYLiCqF89pwu6ZQiTpF6UsqGFV151o.AT1_dTFGHSMJ";
      const routeUrl = "https://route-api.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World";
      // Initialize the map
      const initializeMap = () => {
        try {
          // Create a WebMap
          const webMap = new WebMap({
            basemap: "streets-navigation-vector"
          });

          // Create the MapView
          const mapView = new MapView({
            container: "map-container", // ID of the HTML element
            map: webMap,
            center: [9.140556, 48.690833], // Longitude, Latitude for Europe
            zoom: 4,
          });

          // Add a GraphicsLayer to the map
          const geoLocationLayer = new GraphicsLayer();
          const graphicsLayer = new GraphicsLayer();
          const FilterLayer = new GraphicsLayer();

          webMap.add(graphicsLayer);
          webMap.add(geoLocationLayer);
          webMap.add(FilterLayer);

          favoriteImages.forEach(image => {
            mapView.graphics.removeAll();
            const point = new Point({
              longitude: image.long,
              latitude: image.lat
            });

            let color = [0, 112, 255, 0.8]; // Albastru pentru locații
            console.log("done");
            if (image.done === 1) {
              color = [0, 255, 0, 0.8]; // Verde pentru locațiile vizitate
            } 
            const simpleMarkerSymbol = {
              type: "simple-marker",
              style: "diamond", // Formă diamant
              color: color, // Albastru cu transparență
              size: "16px", // Dimensiune mai mare
              outline: {
                color: [0, 0, 0], // Contur negru
                width: 1.5 // Grosimea conturului
              }

            };


             const pointGraphic = new Graphic({
                geometry: point,
                symbol: simpleMarkerSymbol,
                attributes: {
                imageUrl: image.imageUrl,
                review: image.review,
                done: image.done // Add the "done" status to the attributes
               },
               popupTemplate: {
                title: "Favorite Image",
                content: `
                  <div class="popup-content">
                    <img src="${image.imageUrl}" alt="Favorite" style="width: 100px; height: auto; font-family: 'Copperplate'; font-size: 1.5em;">
                    <p><strong>Status:</strong> ${image.done ? "Visited" : "Not Visited"}</p>
                    ${image.review ? `<p><strong>Description:</strong> ${image.review}</p>` : ''}
                  </div>
                `
              }
              
             });


             mapView.on("click", (event) => {
              const screenPoint = {
                x: event.x,
                y: event.y
              };

              mapView.hitTest(screenPoint).then((response) => {
                if (response.results.length > 0) {
                  const clickedGraphic = response.results.find((result) => result.graphic === pointGraphic)?.graphic;

                  if (clickedGraphic) {
                    const destination = {
                      longitude: clickedGraphic.geometry.longitude,
                      latitude: clickedGraphic.geometry.latitude
                    };

                    // Apelează funcția de calculare a rutei
                    calculateRoute(destination);
                  }
                }
              });
            });
            // Add the graphic to the view's graphics collection
            graphicsLayer.add(pointGraphic);
          });


       

          const locatorUrl = "http://geocode-api.arcgis.com/arcgis/rest/services/World/GeocodeServer";

          const distances = ["Choose a distance...", "<1km", "<5km", "<10km", "<50km", "<1000km", "<2000km", "<5000km", "<10.000km", "All"];
          const select = document.createElement("select");
          select.setAttribute("class", "esri-widget esri-select");
          select.setAttribute("style", "width: 205px; font-family: 'Copperlate'; font-size: 1.1em");

          distances.forEach((distance) => {
            const option = document.createElement("option");
            option.value = distance;
            option.innerHTML = distance;
            select.appendChild(option);
          });

          mapView.ui.add(select, "top-right");

          function calculateDistance(lat1, lon1, lat2, lon2) {
            const R = 6371e3; // Raza Pământului în metri
            const φ1 = (lat1 * Math.PI) / 180;
            const φ2 = (lat2 * Math.PI) / 180;
            const Δφ = ((lat2 - lat1) * Math.PI) / 180;
            const Δλ = ((lon2 - lon1) * Math.PI) / 180;

            const a =
              Math.sin(Δφ / 2) * Math.sin(Δφ / 2) +
              Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);
            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));

            return R * c; // Distanța în metri
          }

          function findPlaces(category, userLocation) {

            let maxDistance = 0;
            switch (category) {
              case "<1km":
                maxDistance = 1000;
                break;
              case "<5km":
                maxDistance = 5000;
                break;
              case "<10km":
                maxDistance = 10000;
                break;
              case "<50km":
                maxDistance = 50000;
                break;
              case "<1000km": 
                maxDistance = 1000000;
                break;
              case "<2000km":
                maxDistance = 2000000;
                break;
              case "<5000km":
                maxDistance = 5000000;
                break;
              case "<10.000km":
                maxDistance = 10000000;
                break;
              case "All":
                maxDistance = Infinity;
                break;
              default:
                return;
            }

            
            favoriteImages.forEach((image) => {
              const distance = calculateDistance(
                userLocation.latitude,
                userLocation.longitude,
                image.lat,
                image.long
              );

              const point = new Point({
                longitude: image.long,
                latitude: image.lat
              });

              if (distance <= maxDistance) {
                let color = [0, 112, 255, 0.8]; // Albastru pentru locații
                if (image.done === 1) {
                  color = [0, 255, 0, 0.8]; // Verde pentru locațiile vizitate
                } else {
                  color = [255, 0, 0, 0.8]; // Roșu pentru locațiile nevizitate
                }

                const pointGraphic = new Graphic({
                  geometry: point,
                  symbol: {
                    type: "simple-marker",
                    style: "diamond", 
                    color: color,
                    size: "15px",
                    outline: {
                      color: "#FFFFFF",
                      width: 2
                    }
                  },
                  attributes: { ...image, Distance: distance },
                  popupTemplate: {
                    title: "Favorite Image",
                    content: `
                      <img src="${image.imageUrl}" alt="Favorite" style="width: 100px; height: auto; font-family: 'Copperplate'; font-size: 1.5em;">
                      <p><strong>Status:</strong> ${image.done ? "Visited" : "Not Visited"}</p>
                      ${image.review ? `<p><strong>Description:</strong> ${image.review}</p>` : ''}
                      <p><strong>Distance: ${Math.round(distance) / 1000} km</p>
                    `
                  }
                });

                mapView.graphics.add(pointGraphic); // Adaugă graficul pe hartă


                mapView.on("click", (event) => {
                  const screenPoint = {
                    x: event.x,
                    y: event.y
                  };

                  mapView.hitTest(screenPoint).then((response) => {
                    if (response.results.length > 0) {
                      const clickedGraphic = response.results.find((result) => result.graphic === pointGraphic)?.graphic;

                      if (clickedGraphic) {
                        const destination = {
                          longitude: clickedGraphic.geometry.longitude,
                          latitude: clickedGraphic.geometry.latitude
                        };

                        // Apelează funcția de calculare a rutei
                        calculateRoute(destination);
                      }
                    }
                  });
                });
              }
            });
          };


          function getUserLocation(callback) {
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(
                (position) => {
                  const pt = {
                    latitude: position.coords.latitude,
                    longitude: position.coords.longitude
                  };
                  callback(pt);
                },
                (error) => {
                  console.error("Error getting user location:", error.message);
                  alert("Unable to retrieve your location.");
                }
              );
            } else {
              alert("Geolocation is not supported by this browser.");
            }
          }

          reactiveUtils.when(() => mapView.stationary, () => {
            getUserLocation((pt) => {
              if (select.value === "Choose a distance...") {
                mapView.graphics.removeAll();
                webMap.add(graphicsLayer);
                webMap.remove(FilterLayer);
              } else {
                mapView.graphics.removeAll();
                webMap.add(FilterLayer);
                findPlaces(select.value, pt);
                webMap.remove(graphicsLayer);
              }
            });
          });

          select.addEventListener("change", (event) => {
            getUserLocation((pt) => {
              if (select.value === "Choose a distance...") {
                mapView.graphics.removeAll();
                webMap.add(graphicsLayer);
                webMap.remove(FilterLayer);
              } else {
                mapView.graphics.removeAll();
                webMap.add(FilterLayer);
                findPlaces(select.value, pt);
                webMap.remove(graphicsLayer);
              }
            });
          });

          async function calculateRoute(destination) {
            // Function to get user's location as a promise
            async function getUserLocationAsync() {
              return new Promise((resolve, reject) => {
                getUserLocation((origin) => {
                  if (origin) {
                    resolve(origin); // Resolve the promise with the origin
                  } else {
                    reject('Failed to get user location');
                  }
                });
              });
            }

            try {
              // Wait for the user location
              const origin = await getUserLocationAsync();
              // Define the route parameters
              const routeParams = new RouteParameters({
                stops: new FeatureSet({
                  features: [
                    new Graphic({
                      geometry: new Point({
                        longitude: origin.longitude,
                        latitude: origin.latitude
                      })
                    }),
                    new Graphic({
                      geometry: new Point({
                        longitude: destination.longitude,
                        latitude: destination.latitude
                      })
                    })
                  ]
                }),
                returnDirections: true
              });
              // Solve the route using the provided parameters
              const response = await route.solve(routeUrl, routeParams);
              
              // Process the route results
              if (response.routeResults && response.routeResults[0]) {
                const result = response.routeResults[0]; // Prima rută
                const routeResult = result.route;
                
                // Setăm simbolul pentru ruta calculată
                routeResult.symbol = new SimpleLineSymbol({
                  color: "#517d84", // Definirea culorii liniei
                  width: 3 // Lățimea liniei
                });
                
                if (currentRoute) {
                  mapView.graphics.remove(currentRoute);
                }
                
                // Adăugăm ruta pe hartă
                mapView.graphics.add(routeResult);
                currentRoute = routeResult;

              } else {
                console.error("Nu s-au găsit rezultate pentru rută.");
              }

            } catch (error) {
              console.error("Route calculation failed:", error);
              alert("No route. im sorry:(\n");
            }
          }

          // Add event listener for geolocation button
          document.getElementById("geolocate-btn").addEventListener("click", function() {
            if (navigator.geolocation) {
              navigator.geolocation.getCurrentPosition(function(position) {
                const latitude = position.coords.latitude;
                const longitude = position.coords.longitude;
                
                // Center the map to the current location
                mapView.goTo({
                  center: [longitude, latitude],
                  zoom: 15
                });

                // Add a marker symbol for the location
                const point = new Point({
                  longitude: longitude,
                  latitude: latitude
                });

                const pointSymbol = new PictureMarkerSymbol({
                  url: "https://static.arcgis.com/images/Symbols/Shapes/BluePin1LargeB.png",  // Blue location pin icon
                  width: "40px",  // Adjust the width of the image
                  height: "40px"  // Adjust the height of the image
                });

                // Create a graphic for the point and add it to the map
                const pointGraphic = new Graphic({
                  geometry: point,
                  symbol: pointSymbol
                });

                // Add the graphic to the view's graphics collection
                geoLocationLayer.add(pointGraphic);
              }, function(error) {
                alert("Error occurred while getting location: " + error.message);
              });
            } else {
              alert("Geolocation is not supported by this browser.");
            }
          });


        } catch (error) {
          console.error("ERROR LOADING THE MAP: ", error);
        }
      };

      // Initialize the map when the page loads
      initializeMap();

    });
  </script>
</body>
</html>
